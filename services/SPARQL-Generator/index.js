// SPARQL Generator avec warmup AU D√âMARRAGE UNIQUEMENT
const http = require('http');
const fetch = require('node-fetch');

// Configuration
const FUSEKI_TIMEOUT = 60000; // 60 secondes
const WARMUP_TIMEOUT = 15000; // 15 secondes pour warmup
const MAX_RETRIES = 3;
const RETRY_DELAY = 2000; // 2 secondes entre tentatives
const FUSEKI_UPDATE_URL = 'http://fuseki:3030/ds/update';

// üî• √âTAT GLOBAL DU WARMUP
let isFusekiWarmed = false;
let warmupInProgress = false;
let warmupPromise = null;

// üî• WARMUP AU D√âMARRAGE DU SERVICE
async function performStartupWarmup() {
  if (warmupInProgress || isFusekiWarmed) {
    console.log('‚è≠Ô∏è Warmup d√©j√† fait ou en cours - skip');
    return true;
  }

  warmupInProgress = true;
  console.log('\nüî• === WARMUP AU D√âMARRAGE DU SPARQL GENERATOR ===');
  
  const fusekiEndpoint = 'http://fuseki:3030/ds/sparql';
  const startTime = Date.now();

  // Requ√™tes de warmup - LES M√äMES que ton code utilise vraiment
  const warmupQueries = [
    {
      name: "Test connexion",
      query: "SELECT (1 as ?test) WHERE { }",
      timeout: 5000
    },
    {
      name: "Fallback principal (EXACT)",
      query: generateFallbackQuery(),
      timeout: 20000
    },
    {
      name: "Requ√™te DEAB (la plus utilis√©e)",
      query: `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>

SELECT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?mediator ?moderator ?resultatRelation WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations de chaque analyse
    ?analysis iadas:hasRelation ?relation .
    
    # R√©cup√©rer les VI et VD de chaque relation
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # R√©cup√©rer les propri√©t√©s des variables VI
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    # R√©cup√©rer les propri√©t√©s des variables VD  
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    # Filtrer sur les VD de cat√©gorie (approche optimis√©e)
    ?variableVD iadas:hasCategory "DEAB" .
    
    # R√©cup√©rer le r√©sultat de relation (OPTIONAL)
    OPTIONAL { 
      ?relation iadas:resultatRelation ?resultatRelation 
    }
    
    # M√©diateur et mod√©rateur (optionnels)
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?analysis
LIMIT 500`,
      timeout: 30000
    },
    {
      name: "Requ√™te Male (courante)",
      query: `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>

SELECT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?mediator ?moderator ?resultatRelation WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations de chaque analyse
    ?analysis iadas:hasRelation ?relation .
    
    # R√©cup√©rer les VI et VD de chaque relation
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # R√©cup√©rer les propri√©t√©s des variables VI
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    # R√©cup√©rer les propri√©t√©s des variables VD  
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    # Filtrer sur les populations par genre
    ?analysis iadas:hasPopulation ?population .
    ?population iadas:gender "Male" .
    
    # R√©cup√©rer le r√©sultat de relation (OPTIONAL)
    OPTIONAL { 
      ?relation iadas:resultatRelation ?resultatRelation 
    }
    
    # M√©diateur et mod√©rateur (optionnels)
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?analysis`,
      timeout: 30000
    },
    {
      name: "Requ√™te large (sans filtres - LIMIT 1500)",
      query: `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>

SELECT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?mediator ?moderator ?resultatRelation WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations de chaque analyse
    ?analysis iadas:hasRelation ?relation .
    
    # R√©cup√©rer les VI et VD de chaque relation
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # R√©cup√©rer les propri√©t√©s des variables VI
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    # R√©cup√©rer les propri√©t√©s des variables VD  
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    # R√©cup√©rer le r√©sultat de relation (OPTIONAL)
    OPTIONAL { 
      ?relation iadas:resultatRelation ?resultatRelation 
    }
    
    # M√©diateur et mod√©rateur (optionnels)
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?analysis
LIMIT 800`,
      timeout: 45000
    },
    {
      name: "Requ√™te Q1 comp√©tence",
      query: `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>

SELECT DISTINCT ?vd ?vi ?categoryVI ?categoryVD ?resultatRelation ?mediator ?moderator ?analysis 
WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations
    ?analysis iadas:hasRelation ?relation .
    
    # Variables et leurs cat√©gories
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    # Relation et m√©diateurs/mod√©rateurs
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?vd ?vi
LIMIT 500`,
      timeout: 40000
    }
  ];

  let successCount = 0;

  for (const [index, warmupQuery] of warmupQueries.entries()) {
    console.log(`\nüéØ [${index + 1}/${warmupQueries.length}] ${warmupQuery.name}`);
    
    const queryStart = Date.now();
    
    try {
      const data = await executeWithRetry(fusekiEndpoint, warmupQuery.query, 2);
      const queryTime = Date.now() - queryStart;
      const resultCount = data.results?.bindings?.length || 0;
      
      console.log(`   ‚úÖ Succ√®s: ${resultCount} r√©sultats en ${queryTime}ms`);
      successCount++;
      
    } catch (error) {
      const queryTime = Date.now() - queryStart;
      console.log(`   ‚ùå √âchec: ${error.message} (${queryTime}ms)`);
      
      // Si le test de connexion √©choue, on attend un peu
      if (index === 0) {
        console.log('   ‚è≥ Fuseki pas encore pr√™t - attente 5s...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    // D√©lai entre requ√™tes
    if (index < warmupQueries.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
  }

  const totalTime = Date.now() - startTime;
  
  console.log(`\nüî• === BILAN WARMUP D√âMARRAGE ===`);
  console.log(`   ‚úÖ Succ√®s: ${successCount}/${warmupQueries.length} requ√™tes`);
  console.log(`   ‚è±Ô∏è Temps total: ${(totalTime/1000).toFixed(1)}s`);
  
  if (successCount >= 4) { // Au moins 4/6 requ√™tes r√©ussies
    isFusekiWarmed = true;
    console.log(`   üöÄ FUSEKI EST MAINTENANT CHAUD !`);
    console.log(`   üéØ Plus de warmup n√©cessaire pour les requ√™tes suivantes`);
    console.log(`   ‚ö° Performance optimale garantie`);
  } else {
    console.log(`   ‚ö†Ô∏è Warmup insuffisant (${successCount}/${warmupQueries.length}) - warmup par requ√™te activ√©`);
  }
  
  warmupInProgress = false;
  return isFusekiWarmed;
}

// üî• WARMUP CONDITIONNEL (seulement si pas fait au d√©marrage)
async function warmupFuseki(endpoint) {
  // Si d√©j√† warm, skip
  if (isFusekiWarmed) {
    console.log('‚ö° WARMUP SKIPP√â - Fuseki d√©j√† chaud depuis le d√©marrage !');
    return true;
  }

  // Si warmup en cours, attendre qu'il finisse
  if (warmupInProgress && warmupPromise) {
    console.log('‚è≥ Warmup en cours - attente de la fin...');
    return await warmupPromise;
  }

  console.log('üî• WARMUP de Fuseki avec requ√™te fallback...');
  const warmupQuery = generateFallbackQuery();

  try {
    const result = await executeWithRetry(endpoint, warmupQuery, 2);
    const resultCount = result.results?.bindings?.length || 0;
    console.log(`‚úÖ Fuseki est r√©veill√© et op√©rationnel (${resultCount} r√©sultats warmup)`);
    
    // Marquer comme warm m√™me si ce n'√©tait qu'un mini-warmup
    isFusekiWarmed = true;
    return true;

  } catch (error) {
    console.error('‚ùå Warmup √©chou√© m√™me avec retry:', error.message);
    return false;
  }
}

async function executeWithRetry(endpoint, query, maxRetries = MAX_RETRIES) {
  let lastError;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const timeout = Math.min(FUSEKI_TIMEOUT * attempt, 180000); // Max 3 minutes

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/sparql-query',
          'Accept': 'application/sparql-results+json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: query,
        timeout: timeout
      });

      if (response.ok) {
        const data = await response.json();
        return data;
      } else {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

    } catch (error) {
      lastError = error;

      if (attempt < maxRetries) {
        const delay = RETRY_DELAY * attempt;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  throw new Error(`√âchec apr√®s ${maxRetries} tentatives: ${lastError.message}`);
}

function generateSparqlQuery(filters) {
  console.log("=== SPARQL GENERATOR avec VARIABLES COMPL√àTES ===");
  console.log("üì• Filtres re√ßus:", JSON.stringify(filters, null, 2));

  const prefixes = `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>`;

  let query = `${prefixes}

SELECT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?mediator ?moderator ?resultatRelation WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations de chaque analyse
    ?analysis iadas:hasRelation ?relation .
    
    # R√©cup√©rer les VI et VD de chaque relation
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # R√©cup√©rer les propri√©t√©s des variables VI
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    # R√©cup√©rer les propri√©t√©s des variables VD  
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }`;

  // Ajouter les filtres conditionnellement

  // Filtre genre
  if (filters.gender && filters.gender !== '') {
    query += `
    
    # Filtrer sur les populations par genre
    ?analysis iadas:hasPopulation ?population .
    ?population iadas:gender "${filters.gender}" .`;
    console.log("‚úÖ Filtre genre ajout√©:", filters.gender);
  }

  // Filtre cat√©gorie VD - APPROCHE OPTIMIS√âE
  if (filters.categoryVD && filters.categoryVD !== '') {
    query += `
    
    # Filtrer sur les VD de cat√©gorie (approche optimis√©e)
    ?variableVD iadas:hasCategory "${filters.categoryVD}" .`;
    console.log("‚úÖ Filtre cat√©gorie VD ajout√© (optimis√©):", filters.categoryVD);
  }

  // Filtre cat√©gorie VI 
  if (filters.categoryVI && filters.categoryVI !== '') {
    query += `
    
    # Filtrer sur les VI de cat√©gorie sp√©cifique
    FILTER(?categoryVI = "${filters.categoryVI}")`;
    console.log("‚úÖ Filtre cat√©gorie VI ajout√©:", filters.categoryVI);
  }

  // Filtre sport
  if (filters.sportType && filters.sportType !== '') {
    query += `
    
    # Filtrer sur les sports
    ?analysis iadas:hasSport ?sport .
    ?sport iadas:sportName ?sportName .
    FILTER(CONTAINS(LCASE(?sportName), "${filters.sportType.toLowerCase()}"))`;
    console.log("‚úÖ Filtre sport ajout√©:", filters.sportType);
  }

  // Filtre VI sp√©cifique
  if (filters.selectedVI && filters.selectedVI !== '') {
    query += `
    
    # Filtrer sur VI sp√©cifique
    FILTER(?vi = "${filters.selectedVI}")`;
    console.log("‚úÖ Filtre VI sp√©cifique ajout√©:", filters.selectedVI);
  }

  // Filtre VD sp√©cifique
  if (filters.selectedVD && filters.selectedVD !== '') {
    query += `
    
    # Filtrer sur VD sp√©cifique
    FILTER(?vd = "${filters.selectedVD}")`;
    console.log("‚úÖ Filtre VD sp√©cifique ajout√©:", filters.selectedVD);
  }

  // Filtre r√©sultat relation
  if (filters.relationDirection && filters.relationDirection !== '') {
    query += `
    
    # Filtrer sur r√©sultat de relation sp√©cifique
    ?relation iadas:resultatRelation "${filters.relationDirection}" .
    BIND("${filters.relationDirection}" AS ?resultatRelation)`;
    console.log("‚úÖ Filtre relation ajout√©:", filters.relationDirection);
  } else {
    // R√©cup√©rer tous les r√©sultats de relation
    query += `
    
    # R√©cup√©rer le r√©sultat de relation (OPTIONAL)
    OPTIONAL { 
      ?relation iadas:resultatRelation ?resultatRelation 
    }`;
  }

  // Toujours r√©cup√©rer m√©diateur et mod√©rateur
  query += `
    
    # M√©diateur et mod√©rateur (optionnels)
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }`;

  // Finaliser la requ√™te
  query += `
}
ORDER BY ?analysis`;

  // Ajouter LIMIT si pas de filtres sp√©cifiques
  const activeFilters = Object.keys(filters).filter(key =>
    filters[key] && filters[key] !== '' && key !== 'queryType'
  ).length;

  if (activeFilters === 0) {
    query += `
LIMIT 1500`;
    console.log("‚ö†Ô∏è Aucun filtre actif - LIMIT 1500 ajout√©");
  }

  console.log("üìù REQU√äTE G√âN√âR√âE avec toutes les variables:");
  console.log(query);
  console.log("=" * 60);

  return query;
}

// Fonction pour ex√©cuter une requ√™te SPARQL UPDATE
async function executeSparqlUpdate(sparqlQuery) {
  console.log('üîÑ Ex√©cution requ√™te SPARQL UPDATE...');
  console.log('üìù Requ√™te:', sparqlQuery.substring(0, 200) + '...');

  try {
    const response = await fetch(FUSEKI_UPDATE_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/sparql-update',
        'Accept': 'text/plain',
        'Authorization': `Basic ${Buffer.from("admin:admin").toString('base64')}`
      },
      body: sparqlQuery,
      timeout: FUSEKI_TIMEOUT
    });

    console.log(`üì® R√©ponse UPDATE: Status ${response.status}`);

    if (response.ok) {
      const responseText = await response.text();
      console.log('‚úÖ UPDATE r√©ussi:', responseText || 'Success');
      return {
        success: true,
        message: responseText || 'Update successful',
        status: response.status
      };
    } else {
      const errorText = await response.text();
      console.error('‚ùå Erreur UPDATE:', errorText);
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

  } catch (error) {
    console.error('üí• Erreur lors de l\'UPDATE:', error.message);
    throw error;
  }
}

// Fonction pour ex√©cuter plusieurs requ√™tes UPDATE en s√©quence
async function executeMultipleSparqlUpdates(queries) {
  console.log(`üîÑ Ex√©cution de ${Object.keys(queries).length} requ√™tes UPDATE...`);
  
  const results = {};
  const errors = [];
  
  for (const [queryName, query] of Object.entries(queries)) {
    try {
      console.log(`\nüéØ Ex√©cution: ${queryName}`);
      const result = await executeSparqlUpdate(query);
      results[queryName] = result;
      console.log(`‚úÖ ${queryName}: Succ√®s`);
      
      // Petit d√©lai entre les requ√™tes pour √©viter la surcharge
      await new Promise(resolve => setTimeout(resolve, 200));
      
    } catch (error) {
      console.error(`‚ùå ${queryName}: √âchec -`, error.message);
      errors.push({
        queryName: queryName,
        error: error.message,
        query: query.substring(0, 200) + '...'
      });
    }
  }
  
  return {
    results: results,
    errors: errors,
    totalQueries: Object.keys(queries).length,
    successCount: Object.keys(results).length,
    errorCount: errors.length
  };
}

function generateCompetenceQuery(questionId) {
  console.log("üöÄ === G√âN√âRATEUR DE REQU√äTES DE COMP√âTENCE D√âMARR√â ===");
  console.log("‚è∞ Timestamp:", new Date().toISOString());
  console.log("üìù Question ID re√ßue:", questionId);
  console.log("üîç Type de questionId:", typeof questionId);
  console.log("üîç QuestionId vide ?", questionId === null || questionId === undefined || questionId === '');

  // V√©rifications de base
  if (!questionId) {
    console.error("‚ùå ERREUR: questionId est vide/null/undefined !");
    console.log("üîß Tentative de r√©cup√©ration d'un ID par d√©faut...");
    questionId = 'q1'; // Fallback
    console.log("‚úÖ ID par d√©faut assign√©:", questionId);
  }

  const prefixes = `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>`;

  console.log("üìã Prefixes SPARQL d√©finis");

  let query = '';
  let selectedCase = 'aucun';
  let expectedResults = 'inconnu';

  console.log("üîÑ Entr√©e dans le switch avec questionId:", questionId);

  switch (questionId) {
    case 'q1':
      console.log("‚úÖ CASE Q1 D√âTECT√â: Pour une ACAD sp√©cifique, facteurs psychosociaux");
      selectedCase = 'q1 - ACAD ‚Üí Facteurs psychosociaux';
      expectedResults = '800-1000 relations (toutes cat√©gories)';

      query = `${prefixes}

SELECT DISTINCT ?vd ?vi ?categoryVI ?categoryVD ?resultatRelation ?mediator ?moderator ?analysis 
WHERE {
    # R√©cup√©rer toutes les analyses
    ?analysis a iadas:Analysis .
    
    # R√©cup√©rer les relations
    ?analysis iadas:hasRelation ?relation .
    
    # Variables et leurs cat√©gories
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    # Relation et m√©diateurs/mod√©rateurs
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?vd ?vi
LIMIT 1000`;
      break;

    case 'q2-protecteur':
      console.log("‚úÖ CASE Q2-PROTECTEUR D√âTECT√â: Facteurs protecteurs ‚Üí ACAD");
      selectedCase = 'q2-protecteur - Facteurs protecteurs UNIQUEMENT';
      expectedResults = '200-400 relations avec resultatRelation = "-"';

      query = `${prefixes}

SELECT DISTINCT ?vi ?vd ?categoryVI ?categoryVD ?analysis ?resultatRelation
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    # FILTRE SP√âCIFIQUE : Relations protectrices uniquement
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD ;
              iadas:resultatRelation "-" .  # Facteur protecteur UNIQUEMENT
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    BIND("-" AS ?resultatRelation)
}
ORDER BY ?vi ?vd
LIMIT 500`;
      break;

    case 'q2-risque':
      console.log("‚úÖ CASE Q2-RISQUE D√âTECT√â: Facteurs de risque ‚Üí ACAD");
      selectedCase = 'q2-risque - Facteurs de risque UNIQUEMENT';
      expectedResults = '300-600 relations avec resultatRelation = "+"';

      query = `${prefixes}

SELECT DISTINCT ?vi ?vd ?categoryVI ?categoryVD ?analysis ?resultatRelation
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    # FILTRE SP√âCIFIQUE : Relations de risque uniquement
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD ;
              iadas:resultatRelation "+" .  # Facteur de risque UNIQUEMENT
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    BIND("+" AS ?resultatRelation)
}
ORDER BY ?vi ?vd
LIMIT 500`;
      break;

    case 'q2-ambigu':
      console.log("‚úÖ CASE Q2-AMBIGU D√âTECT√â: Facteurs ambigus ‚Üí ACAD");
      selectedCase = 'q2-ambigu - Facteurs ambigus UNIQUEMENT';
      expectedResults = '100-300 relations avec resultatRelation = "NS"';

      query = `${prefixes}

SELECT DISTINCT ?vi ?vd ?categoryVI ?categoryVD ?analysis ?resultatRelation
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    # FILTRE SP√âCIFIQUE : Relations non significatives uniquement
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD ;
              iadas:resultatRelation "NS" .  # Non significatif UNIQUEMENT
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    BIND("NS" AS ?resultatRelation)
}
ORDER BY ?vi ?vd
LIMIT 500`;
      break;

    case 'q3-socioenvironnementaux':
      console.log("‚úÖ CASE Q3-SOCIO D√âTECT√â: Facteurs socio-environnementaux ‚Üí ACAD");
      selectedCase = 'q3-socioenvironnementaux - Cat√©gorie Sociocultural factor related to DEAB';
      expectedResults = '50-150 relations de cette cat√©gorie';

      query = `${prefixes}

SELECT DISTINCT ?vi ?vd ?categoryVD ?resultatRelation ?analysis ?categoryVI
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # FILTRE SP√âCIFIQUE : Facteurs socio-environnementaux uniquement
    ?variableVI iadas:VI ?vi ;
                iadas:hasCategory "Sociocultural factor related to DEAB" .
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
    
    BIND("Sociocultural factor related to DEAB" AS ?categoryVI)
}
ORDER BY ?vi ?vd
LIMIT 300`;
      break;

    case 'q3-autres':
      console.log("‚úÖ CASE Q3-AUTRES D√âTECT√â: Autres comportements ‚Üí ACAD");
      selectedCase = 'q3-autres - Cat√©gorie Other behaviors';
      expectedResults = '50-100 relations de cette cat√©gorie';

      query = `${prefixes}

SELECT DISTINCT ?vi ?vd ?categoryVD ?resultatRelation ?analysis ?categoryVI
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    # FILTRE SP√âCIFIQUE : Autres comportements uniquement
    ?variableVI iadas:VI ?vi ;
                iadas:hasCategory "Other behaviors" .
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
    
    BIND("Other behaviors" AS ?categoryVI)
}
ORDER BY ?vi ?vd
LIMIT 300`;
      break;

    default:
      console.error("‚ùå CASE DEFAULT D√âCLENCH√â !");
      console.error("‚ùå Question ID non reconnue:", questionId);
      console.error("‚ùå Valeurs possibles attendues:");
      console.error("   - q1, q2-protecteur, q2-risque, q2-ambigu");
      console.error("   - q3-intrapersonnels, q3-interpersonnels");
      console.error("   - q3-socioenvironnementaux, q3-autres");
      console.log("üîß Utilisation d'une requ√™te par d√©faut...");

      selectedCase = 'DEFAULT - Requ√™te g√©n√©rale de secours';
      expectedResults = '100-200 relations g√©n√©rales';

      // Requ√™te par d√©faut plus cibl√©e
      query = `${prefixes}

SELECT DISTINCT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?resultatRelation 
WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
}
ORDER BY ?analysis
LIMIT 200`;
      break;
  }

  // Logs de r√©sum√©
  console.log("üìä === R√âSUM√â DE LA G√âN√âRATION ===");
  console.log("üéØ Case s√©lectionn√©:", selectedCase);
  console.log("üìà R√©sultats attendus:", expectedResults);
  console.log("üìè Longueur de la requ√™te:", query.length, "caract√®res");
  console.log("üîç Requ√™te contient LIMIT ?", query.includes('LIMIT'));
  console.log("üîç Requ√™te contient DISTINCT ?", query.includes('DISTINCT'));
  console.log("üîç Requ√™te contient des filtres ?", query.includes('FILTRE SP√âCIFIQUE') || query.includes('iadas:resultatRelation'));

  console.log("üìù === REQU√äTE SPARQL G√âN√âR√âE ===");
  console.log(query);
  console.log("=" * 80);
  console.log("üéØ Fin de g√©n√©ration pour questionId:", questionId);
  console.log("‚è∞ Timestamp fin:", new Date().toISOString());
  console.log("=" * 80);

  return query;
}

function getFilterDescription(questionId) {
  const descriptions = {
    'q1': 'Toutes les relations ACAD ‚Üî Facteurs',
    'q2-protecteur': 'Uniquement relations PROTECTRICES (-)',
    'q2-risque': 'Uniquement relations de RISQUE (+)',
    'q2-ambigu': 'Uniquement relations AMBIGU√ãS (NS)',
    'q3-intrapersonnels': 'Uniquement facteurs INTRAPERSONNELS',
    'q3-interpersonnels': 'Uniquement facteurs INTERPERSONNELS',
    'q3-socioenvironnementaux': 'Uniquement facteurs SOCIO-ENVIRONNEMENTAUX',
    'q3-autres': 'Uniquement AUTRES COMPORTEMENTS'
  };

  return descriptions[questionId] || 'Requ√™te g√©n√©rale par d√©faut';
}

// Fonction de fallback simplifi√©e
function generateFallbackQuery() {
  console.log("üö® G√âN√âRATION REQU√äTE DE FALLBACK");

  return `
PREFIX iadas: <http://ia-das.org/onto#>
PREFIX iadas-data: <http://ia-das.org/data#>

SELECT ?analysis ?vi ?vd ?categoryVI ?categoryVD ?mediator ?moderator ?resultatRelation WHERE {
    ?analysis a iadas:Analysis .
    ?analysis iadas:hasRelation ?relation .
    ?relation iadas:hasIndependentVariable ?variableVI ;
              iadas:hasDependentVariable ?variableVD .
    
    ?variableVI iadas:VI ?vi .
    OPTIONAL { ?variableVI iadas:hasCategory ?categoryVI }
    
    ?variableVD iadas:VD ?vd .
    OPTIONAL { ?variableVD iadas:hasCategory ?categoryVD }
    
    OPTIONAL { ?relation iadas:resultatRelation ?resultatRelation }
    OPTIONAL { ?analysis iadas:hasMediator ?mediator }
    OPTIONAL { ?analysis iadas:hasModerator ?moderator }
}
ORDER BY ?analysis
LIMIT 100`;
}

// Serveur HTTP complet
http.createServer(async (req, res) => {
  // Headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  if (req.url === '/update-analysis' && req.method === 'POST') {
    let body = '';
    req.on('data', chunk => (body += chunk));
    req.on('end', async () => {
      const startTime = Date.now();
      
      try {
        console.log('\nüöÄ === D√âBUT UPDATE ANALYSIS ===');
        console.log('‚è∞ Timestamp:', new Date().toISOString());
        
        const requestData = JSON.parse(body);
        console.log('üì• Donn√©es re√ßues:', {
          hasFormData: !!requestData.formData,
          hasSparqlQueries: !!requestData.sparqlQueries,
          queryCount: requestData.sparqlQueries ? Object.keys(requestData.sparqlQueries).length : 0
        });
        
        // V√©rifier les donn√©es re√ßues
        if (!requestData.sparqlQueries) {
          throw new Error('Aucune requ√™te SPARQL fournie');
        }
        
        const queries = requestData.sparqlQueries;
        console.log('üìã Requ√™tes √† ex√©cuter:', Object.keys(queries));
        
        // Ex√©cuter toutes les requ√™tes UPDATE
        const updateResults = await executeMultipleSparqlUpdates(queries);
        
        const totalTime = Date.now() - startTime;
        
        console.log('\nüìä R√âSULTATS UPDATE:');
        console.log(`   ‚úÖ Succ√®s: ${updateResults.successCount}/${updateResults.totalQueries}`);
        console.log(`   ‚ùå Erreurs: ${updateResults.errorCount}`);
        console.log(`   ‚è±Ô∏è Temps total: ${totalTime}ms`);
        
        if (updateResults.errors.length > 0) {
          console.log('\n‚ùå D√âTAIL DES ERREURS:');
          updateResults.errors.forEach(err => {
            console.log(`   - ${err.queryName}: ${err.error}`);
          });
        }
        
        // R√©ponse selon le succ√®s
        if (updateResults.errorCount === 0) {
          // Succ√®s complet
          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({
            success: true,
            message: `Analyse ajout√©e avec succ√®s! ${updateResults.successCount} objets cr√©√©s.`,
            results: updateResults,
            executionTime: totalTime,
            analysisId: requestData.formData?.analysisId || 'unknown',
            timestamp: new Date().toISOString()
          }));
          
        } else if (updateResults.successCount > 0) {
          // Succ√®s partiel
          res.writeHead(207, { 'Content-Type': 'application/json' }); // 207 Multi-Status
          res.end(JSON.stringify({
            success: false,
            message: `Analyse partiellement ajout√©e. ${updateResults.successCount}/${updateResults.totalQueries} objets cr√©√©s.`,
            results: updateResults,
            executionTime: totalTime,
            analysisId: requestData.formData?.analysisId || 'unknown',
            timestamp: new Date().toISOString()
          }));
          
        } else {
          // √âchec complet
          res.writeHead(500, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({
            success: false,
            message: '√âchec complet de l\'ajout de l\'analyse.',
            results: updateResults,
            executionTime: totalTime,
            analysisId: requestData.formData?.analysisId || 'unknown',
            timestamp: new Date().toISOString()
          }));
        }
        
      } catch (error) {
        const totalTime = Date.now() - startTime;
        console.error('\nüí• ERREUR CRITIQUE UPDATE ANALYSIS:');
        console.error(`   Message: ${error.message}`);
        console.error(`   Temps √©coul√©: ${totalTime}ms`);
        
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: false,
          message: 'Erreur serveur lors de l\'ajout de l\'analyse',
          error: error.message,
          executionTime: totalTime,
          timestamp: new Date().toISOString()
        }));
      }
    });
    return;
  }

  if (req.method === 'POST') {
    let body = '';
    req.on('data', chunk => (body += chunk));
    req.on('end', async () => {
      const startTime = Date.now();
      let sparqlQuery = null;
      let usedFallback = false;

      try {
        const requestPayload = JSON.parse(body);
        console.log("üöÄ D√âBUT DU TRAITEMENT");
        console.log("‚è∞ Timestamp:", new Date().toISOString());

        // Configuration Fuseki
        const fusekiEndpoint = 'http://fuseki:3030/ds/sparql';

        console.log("üîÑ D√©termination du type de requ√™te...");
        console.log("üîç queryType d√©tect√©:", requestPayload.queryType);

        if (requestPayload.queryType === 'predefined_competence') {
          console.log("üéØ REQU√äTE DE COMP√âTENCE PR√âD√âFINIE");
          console.log("üìù Question ID:", requestPayload.questionId);

          sparqlQuery = generateCompetenceQuery(requestPayload.questionId);

          if (!sparqlQuery) {
            throw new Error(`Question de comp√©tence non reconnue: ${requestPayload.questionId}`);
          }

          console.log("‚úÖ Requ√™te de comp√©tence g√©n√©r√©e avec succ√®s");
          console.log("üìè Longueur de la requ√™te:", sparqlQuery.length, "caract√®res");

        } else if (requestPayload.queryType === 'raw_sparql') {
          console.log("‚ö° REQU√äTE SPARQL BRUTE");

          sparqlQuery = requestPayload.rawSparqlQuery;
          console.log("‚úÖ Requ√™te SPARQL brute utilis√©e");

        } else {
          console.log("üîç REQU√äTE DE RECHERCHE NORMALE (avec filtres)");

          // Utiliser generateSparqlQuery SEULEMENT pour les requ√™tes normales
          sparqlQuery = generateSparqlQuery(requestPayload);
          console.log("‚úÖ Requ√™te avec filtres g√©n√©r√©e");
        }

        console.log("‚úÖ Type final de requ√™te d√©termin√©");
        console.log("‚úÖ Requ√™te finale pr√™te pour ex√©cution");

        // üî• WARMUP CONDITIONNEL (seulement si pas fait au d√©marrage)
        if (!isFusekiWarmed) {
          console.log("üî• WARMUP N√âCESSAIRE - Fuseki pas encore chaud...");
          const warmupSuccess = await warmupFuseki(fusekiEndpoint);
          if (!warmupSuccess) {
            console.log("‚ö†Ô∏è Warmup √©chou√© - on continue quand m√™me...");
          } else {
            console.log("‚úÖ Warmup r√©ussi - Fuseki est pr√™t !");
          }
        } else {
          console.log("‚ö° WARMUP SKIPP√â - Fuseki d√©j√† chaud depuis le d√©marrage !");
        }

        if (!sparqlQuery || sparqlQuery.trim() === '') {
          throw new Error("Requ√™te SPARQL vide g√©n√©r√©e");
        }

        console.log("üéØ Ex√©cution requ√™te principale...");

        let data;
        try {
          data = await executeWithRetry(fusekiEndpoint, sparqlQuery, MAX_RETRIES);

        } catch (mainError) {
          console.log("üö® TENTATIVE FALLBACK apr√®s √©chec principal...");

          try {
            // Essayer la requ√™te fallback
            const fallbackQuery = generateFallbackQuery();
            data = await executeWithRetry(fusekiEndpoint, fallbackQuery, 2);
            usedFallback = true;
            console.log("‚úÖ FALLBACK R√âUSSI");

            // Ajouter un warning
            data.warning = "Requ√™te simplifi√©e utilis√©e √† cause d'un timeout";

          } catch (fallbackError) {
            console.error("‚ùå FALLBACK AUSSI √âCHOU√â:", fallbackError.message);
            throw mainError; // Relancer l'erreur principale
          }
        }

        const queryTime = Date.now() - startTime;
        const resultCount = data.results?.bindings?.length || 0;

        console.log("üéâ SUCC√àS COMPLET!");
        console.log(`üìä R√©sultats trouv√©s: ${resultCount}`);
        console.log(`‚è±Ô∏è Temps total: ${queryTime}ms`);

        if (resultCount > 0) {
          const firstResult = data.results.bindings[0];
          const availableVars = Object.keys(firstResult);
          const expectedVars = ['analysis', 'vi', 'vd', 'categoryVI', 'categoryVD', 'mediator', 'moderator', 'resultatRelation'];

          console.log("üîç V√âRIFICATION COMPATIBILIT√â PARSER:");
          console.log(`   Variables disponibles: ${availableVars.join(', ')}`);
          console.log(`   Variables attendues: ${expectedVars.join(', ')}`);

          expectedVars.forEach(varName => {
            const present = availableVars.includes(varName);
            const sampleValue = firstResult[varName]?.value || 'VIDE';
            console.log(`   ${present ? '‚úÖ' : '‚ùå'} ${varName}: ${present ? sampleValue : 'MANQUANT'}`);
          });

          // Statistiques de compl√©tude
          const stats = {};
          expectedVars.forEach(varName => {
            const count = data.results.bindings.filter(b => b[varName]?.value).length;
            stats[varName] = {
              count: count,
              percentage: ((count / resultCount) * 100).toFixed(1)
            };
          });

          console.log("üìà COMPL√âTUDE DES DONN√âES:");
          Object.entries(stats).forEach(([varName, stat]) => {
            console.log(`   ${varName}: ${stat.count}/${resultCount} (${stat.percentage}%)`);
          });
        }

        // Ajouter m√©tadonn√©es √©tendues
        data.performance = {
          queryTime: queryTime,
          resultCount: resultCount,
          usedFallback: usedFallback,
          usedRetry: true,
          maxRetries: MAX_RETRIES,
          timestamp: new Date().toISOString(),
          parserCompatible: true,
          availableVariables: resultCount > 0 ? Object.keys(data.results.bindings[0]) : [],
          fusekiWarmed: isFusekiWarmed
        };

        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(data));

      } catch (err) {
        const totalTime = Date.now() - startTime;
        console.error("üí• ERREUR CRITIQUE FINALE:");
        console.error(`   Message: ${err.message}`);
        console.error(`   Temps √©coul√©: ${totalTime}ms`);

        let statusCode = 500;
        let errorType = 'internal_error';

        if (err.message.includes('timeout') || totalTime > FUSEKI_TIMEOUT) {
          statusCode = 408;
          errorType = 'timeout';
        } else if (err.message.includes('503')) {
          statusCode = 503;
          errorType = 'service_unavailable';
        } else if (err.message.includes('JSON')) {
          statusCode = 400;
          errorType = 'invalid_request';
        }

        res.writeHead(statusCode, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          error: 'Erreur SPARQL Generator avec Retry',
          type: errorType,
          message: err.message,
          timestamp: new Date().toISOString(),
          queryTime: totalTime,
          debugging: {
            usedFallback: usedFallback,
            maxRetries: MAX_RETRIES,
            queryLength: sparqlQuery?.length || 0,
            endpoint: 'fuseki:3030/ds/sparql',
            warmupAttempted: true,
            fusekiWarmed: isFusekiWarmed
          }
        }));
      }
    });
  } else {
    res.writeHead(405, { 'Content-Type': 'text/plain' });
    res.end('M√©thode non autoris√©e');
  }
}).listen(8003, () => {
  console.log("üöÄ SPARQL Generator avec WARMUP AU D√âMARRAGE - Port 8003");
  console.log("‚ú® Nouvelles fonctionnalit√©s:");
  console.log("   üî• Warmup automatique AU D√âMARRAGE (une seule fois)");
  console.log("   üîÑ Syst√®me de retry intelligent (3 tentatives)");
  console.log("   üìä Variables compl√®tes pour le parser");
  console.log("   üéØ Compatibilit√© totale avec SPARQLDataParser");
  console.log("   ‚ö° Skip warmup si d√©j√† fait au d√©marrage");
  console.log("   üõ°Ô∏è Fallback automatique en cas d'√©chec");
  console.log("   üÜï Endpoint UPDATE pour ajouter des analyses (/update-analysis)");
  console.log("=" * 60);
  
  // üî• D√âMARRER LE WARMUP EN ARRI√àRE-PLAN
  console.log("\nüî• LANCEMENT DU WARMUP AU D√âMARRAGE...");
  warmupPromise = performStartupWarmup();
});